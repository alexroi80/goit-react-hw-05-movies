{"version":3,"file":"static/js/189.c85e2667.chunk.js","mappings":"sKAAO,IAAMA,EAAsB,CAC/BC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,U,oICoEX,UAnEe,WACX,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAeC,MAAMC,QAAQV,IAAYA,EAAQW,OAAS,EAC1DC,EAAYH,MAAMC,QAAQV,IAA+B,IAAnBA,EAAQW,OAuBpD,OArBAE,EAAAA,EAAAA,YAAU,WACR,GAAKP,EAAL,CAEA,IAAMQ,EAAU,mCAAG,oGAEfX,GAAa,GAFE,UAIYY,EAAAA,EAAAA,IAAkBT,GAJ9B,OAITU,EAJS,OAKff,EAAWe,GACXC,EAAAA,GAAAA,QAAc,2CAA4C5B,EAAAA,GAN3C,gDAQfgB,EAAS,KAAMa,SACfD,EAAAA,GAAAA,MAAY,KAAMC,QAAS7B,EAAAA,GATZ,yBAWfc,GAAa,GAXE,4EAAH,qDAehBW,GAjBoB,CAkBrB,GAAE,CAACR,KAGA,2BACS,OAAVF,IACC,eAAGe,UAAU,UAAb,UAAuB,6DACsCf,KAG9DF,IACC,SAAC,KAAD,CACEkB,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,eAAe,UACfC,OAAO,OACPC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,IAGZhB,IAAa,uBAAG,6CAChBJ,IACC,wBACER,EAAQ6B,KAAK,YAA4B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,GAC9B,OAAQ,2BACJ,wBAAKF,KACL,uBAAIC,MAFSC,EAInB,QAOT,C,+LCxEKC,EAAW,+BACXC,EAAS,mCAEFC,EAAmB,mCAAG,sGACZC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,qCAAkDC,IADtC,uBAC1BG,EAD0B,EAC1BA,KAD0B,kBAE1BA,EAAKC,SAFqB,2CAAH,qDAKnBC,EAAgB,mCAAG,WAAMC,GAAN,yFACLJ,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iCAA8CC,EAA9C,mBAAgEM,EAAhE,MADK,uBACpBH,EADoB,EACpBA,KADoB,kBAErBA,EAAKC,SAFgB,2CAAH,sDAKhBG,EAAiB,mCAAG,WAAMnC,GAAN,yFACV8B,EAAAA,EAAAA,IAAA,UAChBH,EADgB,kBACE3B,EADF,oBACqB4B,IAFX,uBACxBG,EADwB,EACxBA,KADwB,kBAIxBA,GAJwB,2CAAH,sDAOjBK,EAAiB,mCAAG,WAAMpC,GAAN,yFACV8B,EAAAA,EAAAA,IAAA,UAChBH,EADgB,kBACE3B,EADF,4BAC6B4B,IAFnB,uBACxBG,EADwB,EACxBA,KADwB,kBAIxBA,EAAKM,MAJmB,2CAAH,sDAMjB5B,EAAiB,mCAAG,WAAMT,GAAN,yFACR8B,EAAAA,EAAAA,IAAA,UAChBH,EADgB,kBACE3B,EADF,4BAC6B4B,IAFrB,uBACtBG,EADsB,EACtBA,KADsB,kBAItBA,EAAKC,SAJiB,2CAAH,qD","sources":["components/Notification/Notification.js","components/Reviews/Reviews.jsx","components/helpers/api.js"],"sourcesContent":["export const notificationOptions = {\n    position: \"top-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: \"colored\",\n}","import React, {useEffect, useState} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieReviews } from \"../helpers/api\";\nimport { toast } from 'react-toastify';\nimport { notificationOptions } from \"components/Notification/Notification\";\nimport { MutatingDots } from \"react-loader-spinner\";\n\n\n\nconst Reviews =()=>{\n    const [reviews, setReviews] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const { movieId } = useParams();\n\n    const checkReviews = Array.isArray(reviews) && reviews.length > 0;\n    const noRewievs = Array.isArray(reviews) && reviews.length === 0;\n\n    useEffect(() => {\n      if (!movieId) return;\n  \n      const getReviews = async () => {\n        try {\n          setIsLoading(true);\n  \n          const movieReviews = await fetchMovieReviews(movieId);\n          setReviews(movieReviews);\n          toast.success('Movie reviews were successfully fetched!', notificationOptions);\n        } catch (error) {\n          setError(error.message);\n          toast.error(error.message, notificationOptions);\n        } finally {\n          setIsLoading(false);\n        }\n      };\n  \n      getReviews();\n    }, [movieId]);\n\n    return(\n        <div>\n      {error !== null && (\n        <p className=\"c-error\">\n          Oops, some error occured. Please, try again later. Error: {error}\n        </p>\n      )}\n      {isLoading && (\n        <MutatingDots\n          height=\"100\"\n          width=\"100\"\n          color=\"#5800a5\"\n          secondaryColor=\"#e08e00\"\n          radius=\"12.5\"\n          ariaLabel=\"mutating-dots-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      )}\n      {noRewievs && <p>We do not have any review for this movie</p>}\n      {checkReviews && (\n        <ul>\n         {reviews.map (({author, content, id}) => {\n            return (<li key={id}>\n                <h2>{author}</h2>\n                <p>{content}</p>\n            </li>);\n         })}\n          </ul>\n        \n      )}\n      \n    </div>\n    );\n}\n\nexport default Reviews;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY= 'd2ed1712f75ea64103909f0dfb022753';\n\nexport const fetchTrendingMovies = async () => {\n  const {data} = await axios.get(`${BASE_URL}/trending/all/day?api_key=${API_KEY}`);\n  return data.results;\n};\n\nexport const fetchSearchMovie = async movie => {\n    const { data } = await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query='${movie}'`);\n    return data.results;\n  };\n\nexport const fetchMovieDetails = async movieId => {\n  const {data} = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const {data} = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return data.cast;\n};\nexport const fetchMovieReviews = async movieId => {\n    const {data} = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return data.results;\n  };\n"],"names":["notificationOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","movieId","useParams","checkReviews","Array","isArray","length","noRewievs","useEffect","getReviews","fetchMovieReviews","movieReviews","toast","message","className","height","width","color","secondaryColor","radius","ariaLabel","wrapperStyle","wrapperClass","visible","map","author","content","id","BASE_URL","API_KEY","fetchTrendingMovies","axios","data","results","fetchSearchMovie","movie","fetchMovieDetails","fetchMovieCredits","cast"],"sourceRoot":""}