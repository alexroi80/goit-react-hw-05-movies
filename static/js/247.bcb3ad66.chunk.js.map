{"version":3,"file":"static/js/247.bcb3ad66.chunk.js","mappings":"iRACA,GAAiB,E,SC0EjB,EAlEY,WACR,OAAwBA,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OArBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAEA,IAAMG,EAAO,mCAAG,oGAEZN,GAAa,GAFD,UAIWO,EAAAA,EAAAA,IAAkBJ,GAJ7B,OAINK,EAJM,OAKZV,EAAQU,GACRC,EAAAA,GAAAA,QAAc,uCAAwCC,EAAAA,GAN1C,gDAQZR,EAAS,KAAMS,SACfF,EAAAA,GAAAA,MAAY,KAAME,QAASD,EAAAA,GATf,yBAWZV,GAAa,GAXD,4EAAH,qDAebM,GAjBoB,CAkBrB,GAAE,CAACH,KAGA,2BACS,OAAVF,IACC,eAAGW,UAAU,UAAb,UAAuB,6DACsCX,KAG9DF,IACC,SAAC,KAAD,CACEc,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,eAAe,UACfC,OAAO,OACPC,UAAU,wBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,IAGH,OAATxB,IACC,wBACEA,EAAKyB,KAAK,YAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UACvC,OAAQ,2BACJ,gBAAKC,IAAK,kCAAkCH,EAAcI,IAAKL,KAC/D,eAAIX,UAAWiB,EAAAA,KAAf,SAA0BN,KAC1B,eAAGX,UAAWiB,EAAAA,UAAd,UAA6B,cAAYH,OAH5BD,EAKnB,QAST,C,sDCzEM,IAAMf,EAAsB,CAC/BoB,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,U,+LCNLC,EAAW,+BACXC,EAAS,mCAEFC,EAAmB,mCAAG,sGACZC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,qCAAkDC,IADtC,uBAC1BG,EAD0B,EAC1BA,KAD0B,kBAE1BA,EAAKC,SAFqB,2CAAH,qDAKnBC,EAAgB,mCAAG,WAAMC,GAAN,yFACLJ,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iCAA8CC,EAA9C,mBAAgEM,EAAhE,MADK,uBACpBH,EADoB,EACpBA,KADoB,kBAErBA,EAAKC,SAFgB,2CAAH,sDAKhBG,EAAiB,mCAAG,WAAM5C,GAAN,yFACVuC,EAAAA,EAAAA,IAAA,UAChBH,EADgB,kBACEpC,EADF,oBACqBqC,IAFX,uBACxBG,EADwB,EACxBA,KADwB,kBAIxBA,GAJwB,2CAAH,sDAOjBpC,EAAiB,mCAAG,WAAMJ,GAAN,yFACVuC,EAAAA,EAAAA,IAAA,UAChBH,EADgB,kBACEpC,EADF,4BAC6BqC,IAFnB,uBACxBG,EADwB,EACxBA,KADwB,kBAIxBA,EAAK9C,MAJmB,2CAAH,sDAMjBmD,EAAiB,mCAAG,WAAM7C,GAAN,yFACRuC,EAAAA,EAAAA,IAAA,UAChBH,EADgB,kBACEpC,EADF,4BAC6BqC,IAFrB,uBACtBG,EADsB,EACtBA,KADsB,kBAItBA,EAAKC,SAJiB,2CAAH,qD","sources":["components/Cast/Cast.mobile.css","components/Cast/Cast.jsx","components/Notification/Notification.js","components/helpers/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, {useEffect, useState} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieCredits } from \"../helpers/api\";\nimport { toast } from 'react-toastify';\nimport { notificationOptions } from \"components/Notification/Notification\";\nimport { MutatingDots } from \"react-loader-spinner\";\nimport css from './Cast.mobile.css'\n\n\nconst Cast =()=>{\n    const [cast, setCast] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const { movieId } = useParams();\n  \n    useEffect(() => {\n      if (!movieId) return;\n  \n      const getCast = async () => {\n        try {\n          setIsLoading(true);\n  \n          const castData = await fetchMovieCredits(movieId);\n          setCast(castData);\n          toast.success('Movie cast was successfully fetched!', notificationOptions);\n        } catch (error) {\n          setError(error.message);\n          toast.error(error.message, notificationOptions);\n        } finally {\n          setIsLoading(false);\n        }\n      };\n  \n      getCast();\n    }, [movieId]);\n\n    return(\n        <div>\n      {error !== null && (\n        <p className=\"c-error\">\n          Oops, some error occured. Please, try again later. Error: {error}\n        </p>\n      )}\n      {isLoading && (\n        <MutatingDots\n          height=\"100\"\n          width=\"100\"\n          color=\"#5800a5\"\n          secondaryColor=\"#e08e00\"\n          radius=\"12.5\"\n          ariaLabel=\"mutating-dots-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      )}\n      {cast !== null && (\n        <ul>\n         {cast.map (({name, profile_path, cast_id, character}) => {\n            return (<li key={cast_id}>\n               {<img src={'https://image.tmdb.org/t/p/w200'+profile_path} alt={name}/>}\n                <h2 className={css.name}>{name}</h2>\n                <p className={css.character}>Character: {character}</p>\n            </li>);\n         })}\n          </ul>\n        \n      )}\n      \n    </div>\n    );\n\n  \n}\n\nexport default Cast;","export const notificationOptions = {\n    position: \"top-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: \"colored\",\n}","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY= 'd2ed1712f75ea64103909f0dfb022753';\n\nexport const fetchTrendingMovies = async () => {\n  const {data} = await axios.get(`${BASE_URL}/trending/all/day?api_key=${API_KEY}`);\n  return data.results;\n};\n\nexport const fetchSearchMovie = async movie => {\n    const { data } = await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query='${movie}'`);\n    return data.results;\n  };\n\nexport const fetchMovieDetails = async movieId => {\n  const {data} = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const {data} = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return data.cast;\n};\nexport const fetchMovieReviews = async movieId => {\n    const {data} = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return data.results;\n  };\n"],"names":["useState","cast","setCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getCast","fetchMovieCredits","castData","toast","notificationOptions","message","className","height","width","color","secondaryColor","radius","ariaLabel","wrapperStyle","wrapperClass","visible","map","name","profile_path","cast_id","character","src","alt","css","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","BASE_URL","API_KEY","fetchTrendingMovies","axios","data","results","fetchSearchMovie","movie","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}